# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import blockchain_pb2 as blockchain__pb2


class BlockChainStub(object):
    """python -m grpc_tools.protoc --python_out=. --grpc_python_out=. -I. blockchain.proto
    blockchain service and the function definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddBlock = channel.unary_unary(
                '/BlockChain/AddBlock',
                request_serializer=blockchain__pb2.AddBlockRequest.SerializeToString,
                response_deserializer=blockchain__pb2.AddBlockResponse.FromString,
                )
        self.QueryBlockchain = channel.unary_unary(
                '/BlockChain/QueryBlockchain',
                request_serializer=blockchain__pb2.QueryBlockchainRequest.SerializeToString,
                response_deserializer=blockchain__pb2.QueryBlockchainResponse.FromString,
                )
        self.QueryBlock = channel.unary_unary(
                '/BlockChain/QueryBlock',
                request_serializer=blockchain__pb2.QueryBlockRequest.SerializeToString,
                response_deserializer=blockchain__pb2.QueryBlockResponse.FromString,
                )
        self.AddTransaction = channel.unary_unary(
                '/BlockChain/AddTransaction',
                request_serializer=blockchain__pb2.AddTransactionRequest.SerializeToString,
                response_deserializer=blockchain__pb2.AddTransactionResponse.FromString,
                )
        self.AddNeighbor = channel.unary_unary(
                '/BlockChain/AddNeighbor',
                request_serializer=blockchain__pb2.AddNeighborRequest.SerializeToString,
                response_deserializer=blockchain__pb2.AddNeighborResponse.FromString,
                )
        self.Broadcast = channel.unary_unary(
                '/BlockChain/Broadcast',
                request_serializer=blockchain__pb2.BroadcastRequest.SerializeToString,
                response_deserializer=blockchain__pb2.BroadcastResponse.FromString,
                )


class BlockChainServicer(object):
    """python -m grpc_tools.protoc --python_out=. --grpc_python_out=. -I. blockchain.proto
    blockchain service and the function definition
    """

    def AddBlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryBlockchain(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryBlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddNeighbor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Broadcast(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BlockChainServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.AddBlock,
                    request_deserializer=blockchain__pb2.AddBlockRequest.FromString,
                    response_serializer=blockchain__pb2.AddBlockResponse.SerializeToString,
            ),
            'QueryBlockchain': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryBlockchain,
                    request_deserializer=blockchain__pb2.QueryBlockchainRequest.FromString,
                    response_serializer=blockchain__pb2.QueryBlockchainResponse.SerializeToString,
            ),
            'QueryBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryBlock,
                    request_deserializer=blockchain__pb2.QueryBlockRequest.FromString,
                    response_serializer=blockchain__pb2.QueryBlockResponse.SerializeToString,
            ),
            'AddTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.AddTransaction,
                    request_deserializer=blockchain__pb2.AddTransactionRequest.FromString,
                    response_serializer=blockchain__pb2.AddTransactionResponse.SerializeToString,
            ),
            'AddNeighbor': grpc.unary_unary_rpc_method_handler(
                    servicer.AddNeighbor,
                    request_deserializer=blockchain__pb2.AddNeighborRequest.FromString,
                    response_serializer=blockchain__pb2.AddNeighborResponse.SerializeToString,
            ),
            'Broadcast': grpc.unary_unary_rpc_method_handler(
                    servicer.Broadcast,
                    request_deserializer=blockchain__pb2.BroadcastRequest.FromString,
                    response_serializer=blockchain__pb2.BroadcastResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'BlockChain', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BlockChain(object):
    """python -m grpc_tools.protoc --python_out=. --grpc_python_out=. -I. blockchain.proto
    blockchain service and the function definition
    """

    @staticmethod
    def AddBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BlockChain/AddBlock',
            blockchain__pb2.AddBlockRequest.SerializeToString,
            blockchain__pb2.AddBlockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryBlockchain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BlockChain/QueryBlockchain',
            blockchain__pb2.QueryBlockchainRequest.SerializeToString,
            blockchain__pb2.QueryBlockchainResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BlockChain/QueryBlock',
            blockchain__pb2.QueryBlockRequest.SerializeToString,
            blockchain__pb2.QueryBlockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BlockChain/AddTransaction',
            blockchain__pb2.AddTransactionRequest.SerializeToString,
            blockchain__pb2.AddTransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddNeighbor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BlockChain/AddNeighbor',
            blockchain__pb2.AddNeighborRequest.SerializeToString,
            blockchain__pb2.AddNeighborResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Broadcast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BlockChain/Broadcast',
            blockchain__pb2.BroadcastRequest.SerializeToString,
            blockchain__pb2.BroadcastResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
