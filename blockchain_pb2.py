# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: blockchain.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import builder as _builder
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x10\x62lockchain.proto\"*\n\x10\x42roadcastRequest\x12\x16\n\x06\x62locks\x18\x01 \x03(\x0b\x32\x06.Block\"$\n\x11\x42roadcastResponse\x12\x0f\n\x07message\x18\x01 \x01(\t\"3\n\x12\x41\x64\x64NeighborRequest\x12\x0f\n\x07message\x18\x01 \x01(\t\x12\x0c\n\x04port\x18\x02 \x01(\x05\"&\n\x13\x41\x64\x64NeighborResponse\x12\x0f\n\x07message\x18\x01 \x01(\t\":\n\x15\x41\x64\x64TransactionRequest\x12!\n\x0btransaction\x18\x01 \x01(\x0b\x32\x0c.Transaction\")\n\x16\x41\x64\x64TransactionResponse\x12\x0f\n\x07message\x18\x01 \x01(\t\":\n\x0f\x41\x64\x64\x42lockRequest\x12\x13\n\x0btransaction\x18\x01 \x01(\t\x12\x12\n\nexpectHash\x18\x02 \x01(\x05\" \n\x10\x41\x64\x64\x42lockResponse\x12\x0c\n\x04hash\x18\x01 \x01(\t\"\x95\x01\n\x05\x42lock\x12\r\n\x05index\x18\x01 \x01(\x05\x12\x11\n\ttimestamp\x18\x02 \x01(\x05\x12\r\n\x05nonce\x18\x03 \x01(\x05\x12\x0c\n\x04hash\x18\x04 \x01(\t\x12\x15\n\rprevBlockHash\x18\x05 \x01(\t\x12\x13\n\x0bmerkle_tree\x18\x06 \x01(\t\x12!\n\x0btransaction\x18\x07 \x03(\x0b\x32\x0c.Transaction\"M\n\x0bTransaction\x12\x0e\n\x06sender\x18\x01 \x01(\t\x12\x10\n\x08receiver\x18\x02 \x01(\t\x12\x0e\n\x06\x61mount\x18\x03 \x01(\x05\x12\x0c\n\x04\x64\x61ta\x18\x04 \x01(\t\")\n\x16QueryBlockchainRequest\x12\x0f\n\x07message\x18\x01 \x01(\t\"1\n\x17QueryBlockchainResponse\x12\x16\n\x06\x62locks\x18\x01 \x03(\x0b\x32\x06.Block\"$\n\x11QueryBlockRequest\x12\x0f\n\x07message\x18\x01 \x01(\t\"+\n\x12QueryBlockResponse\x12\x15\n\x05\x62lock\x18\x01 \x01(\x0b\x32\x06.Block2\xf7\x02\n\nBlockChain\x12\x31\n\x08\x41\x64\x64\x42lock\x12\x10.AddBlockRequest\x1a\x11.AddBlockResponse\"\x00\x12\x46\n\x0fQueryBlockchain\x12\x17.QueryBlockchainRequest\x1a\x18.QueryBlockchainResponse\"\x00\x12\x37\n\nQueryBlock\x12\x12.QueryBlockRequest\x1a\x13.QueryBlockResponse\"\x00\x12\x43\n\x0e\x41\x64\x64Transaction\x12\x16.AddTransactionRequest\x1a\x17.AddTransactionResponse\"\x00\x12:\n\x0b\x41\x64\x64Neighbor\x12\x13.AddNeighborRequest\x1a\x14.AddNeighborResponse\"\x00\x12\x34\n\tBroadcast\x12\x11.BroadcastRequest\x1a\x12.BroadcastResponse\"\x00\x62\x06proto3')

_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'blockchain_pb2', globals())
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _BROADCASTREQUEST._serialized_start=20
  _BROADCASTREQUEST._serialized_end=62
  _BROADCASTRESPONSE._serialized_start=64
  _BROADCASTRESPONSE._serialized_end=100
  _ADDNEIGHBORREQUEST._serialized_start=102
  _ADDNEIGHBORREQUEST._serialized_end=153
  _ADDNEIGHBORRESPONSE._serialized_start=155
  _ADDNEIGHBORRESPONSE._serialized_end=193
  _ADDTRANSACTIONREQUEST._serialized_start=195
  _ADDTRANSACTIONREQUEST._serialized_end=253
  _ADDTRANSACTIONRESPONSE._serialized_start=255
  _ADDTRANSACTIONRESPONSE._serialized_end=296
  _ADDBLOCKREQUEST._serialized_start=298
  _ADDBLOCKREQUEST._serialized_end=356
  _ADDBLOCKRESPONSE._serialized_start=358
  _ADDBLOCKRESPONSE._serialized_end=390
  _BLOCK._serialized_start=393
  _BLOCK._serialized_end=542
  _TRANSACTION._serialized_start=544
  _TRANSACTION._serialized_end=621
  _QUERYBLOCKCHAINREQUEST._serialized_start=623
  _QUERYBLOCKCHAINREQUEST._serialized_end=664
  _QUERYBLOCKCHAINRESPONSE._serialized_start=666
  _QUERYBLOCKCHAINRESPONSE._serialized_end=715
  _QUERYBLOCKREQUEST._serialized_start=717
  _QUERYBLOCKREQUEST._serialized_end=753
  _QUERYBLOCKRESPONSE._serialized_start=755
  _QUERYBLOCKRESPONSE._serialized_end=798
  _BLOCKCHAIN._serialized_start=801
  _BLOCKCHAIN._serialized_end=1176
# @@protoc_insertion_point(module_scope)
